// MIXINS

@mixin ls-create-widths($widths, $breakpoint-alias: null) {

  // Initialise an empty utility map that will eventually contain all our classes
  $pseudo-class-map: ();

  // Loop widths
  @each $denominator in $widths {

    // If 1=1, 2=2, 3=3; @for will skip over so create 1/1 class manually
    @if ($denominator == 1) {

      // Create 1/1 class
      $class-name: ls-create-width-class-name($ls-width-class-style, 1, 1, $breakpoint-alias);

      .#{$class-name} {
        width: 100%;
      }
    } @else {

      // Loop widths as fractions
      @for $numerator from 1 to $denominator {

        // Create class name and set width value
        $class-name: ls-create-width-class-name($ls-width-class-style, $numerator, $denominator, $breakpoint-alias);
        $width-value: percentage($numerator / $denominator);

        // Is this width already in our utility map?
        $duplicate: map-get($pseudo-class-map, $width-value);

        // Create width class
        .#{$class-name} {

          // If this width is in utility map, @extend the duplicate, else create a new one
          @if $duplicate {
            @extend .#{$duplicate};
          } @else {
            width: $width-value;

            @if $ls-enable-flex {
              @supports (display: flex) and (flex-wrap: wrap) {
                width: 100%;
                flex-grow: 1;
                flex-shrink: 0;
                flex-basis: $width-value;
                max-width: $width-value;
              }
            }
          }
        }

        // Add this class to utility map
        $add-class: ($width-value: $class-name);
        $pseudo-class-map: map-merge($pseudo-class-map, $add-class);
      }
    }
  }
}

// $grid-key: string that identifies the grid
// $gutter: customisable rem or px value. Default: $ls-gutter
@mixin ls-create-grid($grid-key, $gutter, $divide, $operand) {
  $grid-gutter: $gutter;

  @if $operand != 1 {
    @if $divide {
      $grid-gutter: $gutter / $operand;
    } @else {
      $grid-gutter: $gutter * $operand;
    }
  }

  .#{slCreateBlockClassName($grid-key)} {
    margin-left: -($grid-gutter);

    > .#{slCreateElementClassName()} {
      padding-left: ($grid-gutter);
    }

    @if $ls-enable-rtl {
      @at-root html[dir=rtl] & {
        margin-right: -($grid-gutter);

        > .#{slCreateElementClassName()} {
          padding-right: ($grid-gutter);
        }
      }
    }
  }
}

@mixin ls-mq($alias) {

  // Search breakpoint map for alias
  $query: map-get($ls-breakpoints, $alias);

  // If alias exists, print out media query
  @if $query {
    @media #{$query} {
      @content;
    }
  } @else {
    @error "No breakpoint found for #{$alias}";
  }
}

@mixin ls-mq-spacer($property, $value, $opt-property: false) {
  // check if responsive on both variables is on
  @if $ls-enable-grid-spacers-breakpoints {

    // loop every breakpoint
    @each $alias, $query in ($ls-breakpoints) {

      // take the name of the parent class, add the breakpoint modifier and alias
      &#{$ls-breakpoint-class-chain}#{$alias} {
        @include ls-mq($alias) {
          #{$property}: $value !important;

          @if $opt-property {
            #{$opt-property}: $value !important;
          }
        }
      }
    }
  }
}
